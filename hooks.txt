1. useState
	Dùng khi nào? Khi muốn dữ liệu thay đổi thì giao diện tự động được cập nhật (render lại)

import { useState } from 'react';

function Component() {
    const [state, setState] = useState(initState)

    ...
}

*Nếu initState là 1 function, thì sẽ lấy giá trị return của function đó làm giá trị initSate

*Lưu ý: prevState trả về giá trị state trước đó, ví dụ ở đoạn code dưới đây setCounter sẽ thực hiện 3 lần
    const [counter, setCounter] = useState(1)

    const handleIncrease = () => {
        setCounter(prevState => prevState + 1)
        setCounter(prevState => prevState + 1)
        setCounter(prevState => prevState + 1)
    }

VD: cập nhật thêm thông tin

    const [info, setInfo] = useState({
        name: 'Lý Đại Phát',
        age: 18,
        address: 'Hà Nội, VN'
    });

    const handleUpdate = () => {
        setInfo({
            ...info,
            bio: 'Hello world'
        })
hoặc
        setInfo(prev => {

            //logic...

            return {
                ...prev,
                bio: 'Hello world'
            }
        })
    }


*One-way binding: Ràng buộc một chiều (ReactJS)
	Khi dữ liệu state thay đổi, UI cũng thay đổi HOẶC ngược lại (chỉ 1 trong 2)
*Two-way binding: Ràng buộc hai chiều (ReactJS, VueJS)
	Khi dữ liệu state thay đổi, UI cũng thay đổi VÀ ngược lại (cả 2)

*Ví dụ xử lý Form với two-way binding
function App() {
    const [name, setName] = useState('');
    const [email, setEmail] = useState('');

    const handleSubmit = () => {
        console.log({ name, email });
    }

    return (
        <div className="App">

            <input type="text" onChange={e => setName(e.target.value)} />
            <input type="text" onChange={e => setEmail(e.target.value)} />

            <button onClick={handleSubmit}>Register</button>

        </div>
    );
}


*Ví dụ xử lý Form Radio với two-way binding

const courses = [
    {
        id: 1,
        name: 'HTML, CSS'
    },
    {
        id: 2,
        name: 'JavaScript'
    },
    {
        id: 3,
        name: 'ReactJS'
    },
]


function App() {
    const [checked, setChecked] = useState();

    console.log(checked);
    const handleSubmit = () => {
        //Call API
        console.log({ id: checked });
    }

    return (
        <div className="App">
            {courses.map(course => (
                <div key={course.id}>
                    <input
                        type="radio"
                        checked={checked === course.id}
                        onChange={() => setChecked(course.id)}
                    />
                    {course.name}
                </div>
            ))}

            <button onClick={handleSubmit}>Register</button>

        </div>
    );
}

*Ví dụ xử lý Form Checkbox với two-way binding

const courses = [
    {
        id: 1,
        name: 'HTML, CSS'
    },
    {
        id: 2,
        name: 'JavaScript'
    },
    {
        id: 3,
        name: 'ReactJS'
    },
]


function App() {
    const [checked, setChecked] = useState([]);

    const handleCheck = (id) => {
        setChecked(prev => {
            const isChecked = checked.includes(id);
            if (isChecked) {
                return checked.filter(item => item !== id);
            } else {
                return [...prev, id]
            }
        })
    }

    const handleSubmit = () => {
        //Call API
        console.log({ ids: checked });
    }

    return (
        <div className="App">
            {courses.map(course => (
                <div key={course.id}>
                    <input
                        type="checkbox"
                        checked={checked.includes(course.id)}
                        onChange={() => handleCheck(course.id)}
                    />
                    {course.name}
                </div>
            ))}

            <button onClick={handleSubmit}>Register</button>

        </div>
    );
}

*Lưu ý về performance, ví dụ todolist, nếu storageJobs để ở ngoài thì mỗi lần render chạy lại sẽ gọi storageJobs => lãng phí
	Khắc phục: useState truyền vào 1 callback

function App() {


    const [job, setJob] = useState('')
    const [jobs, setJobs] = useState(() => {
        const storageJobs = JSON.parse(localStorage.getItem('jobs'))	//Đưa vào trong callback của useState => tăng performance do chỉ gọi 1 lần
        console.log(storageJobs);
        return storageJobs ?? []	//toán tử ??: nếu vế đầu là null hoặc undefined thì lấy vế sau
    })

    const handleSubmit = () => {
        setJobs(prev => {
            const newJobs = [...prev, job]

            const jsonJobs = JSON.stringify(newJobs)
            localStorage.setItem('jobs', jsonJobs);

            return newJobs
        })

        setJob('')
    }

    return (
        <div className="App">
            <input
                value={job}
                type="text"
                onChange={(e) => setJob(e.target.value)} />
            <button onClick={handleSubmit}>Add</button>

            <ul>
                {jobs.map((job, index) => (
                    <li key={index}>{job}</li>
                ))}
            </ul>
        </div>
    );
}

*MOUNTED & UNMOUNTED
	mounted: thời điểm đưa component vào sử dụng
	unmounted: thời điểm gỡ component, k sử dụng

2. useEffect hook
	Dùng update DOM, Call API, Listen DOM events, Cleanup
 	
Tại sao lại dùng useEffect? Để giải quyết trường hợp xử lý event sau khi render DOM xong mới xử lý, nếu chạy trước khi render DOM sẽ lỗi ngay
 	1. useEffect(callback) - ứng dụng khi gõ tới đâu, hiện title lên trình duyệt tới đó
 		- Gọi callback mỗi khi component re-render
 		- Gọi callback sau khi component thêm element vào DOM
  		- Gọi callback nhiều lần
	2. useEffect(callback, []) - ứng dụng khi call API, chỉ call 1 lần duy nhất
  		- Đối số thứ 2 là mảng rỗng => chỉ gọi callback 1 lần duy nhất
	3. useEffect(callback, [deps]) - ứng dụng khi có 3 option, click option nào thì render giao diện ấy ra
		- Callback được gọi lại mỗi khi deps thay đổi


TH1: - ứng dụng khi gõ tới đâu, hiện title lên trình duyệt tới đó
function App() {

    const [title, setTitle] = useState('')

    useEffect(() => {
        document.title = title
    })

    return (
        <div className="App">
            <input type="text" value={title} onChange={e => setTitle(e.target.value)} />
        </div>
    );
}

TH2: - ứng dụng khi call API, chỉ call 1 lần duy nhất

function App() {

    const [title, setTitle] = useState('')
    const [posts, setPosts] = useState([])

    useEffect(() => {
        fetch('https://jsonplaceholder.typicode.com/posts')
            .then(res => res.json())
            .then(posts => {
                setPosts(posts)
            })
    }, [])

    return (
        <div className="App">
            <input type="text" value={title} onChange={e => setTitle(e.target.value)} />
            <ul>
                {posts.map(post => (
                    <li key={post.id}>{post.title}</li>

                ))}
            </ul>
        </div>
    );
}

TH3: - ứng dụng khi có 3 option, click option nào thì render giao diện ấy ra

const tabs = ['posts', 'todos', 'albums']

function App() {

    const [title, setTitle] = useState('')
    const [posts, setPosts] = useState([])
    const [type, setType] = useState('posts')


    useEffect(() => {
        fetch(`https://jsonplaceholder.typicode.com/${type}`)
            .then(res => res.json())
            .then(posts => {
                setPosts(posts)
            })
    }, [type])

    return (
        <div className="App">
            {tabs.map(tab => (
                <button
                    key={tab}
                    style={type === tab ?
                        {
                            color: '#fff',
                            backgroundColor: '#333'
                        } : {}}
                    onClick={() => setType(tab)}>
                    {tab}
                </button>
            ))}

            <input type="text" value={title} onChange={e => setTitle(e.target.value)} />
            <ul>
                {posts.map(post => (
                    <li key={post.id}>{post.title}</li>

                ))}
            </ul>
        </div>
    );
}